<
Binary counting. The file contains lines of lovercase i. Replace each
'i'-filled line with the binary count of how many 'i's are in it.
>

<
The program works by forming lines of special format and repeatedly applying
substitution rules on them to perform binary counting.
>

<
Line format for counters looks like this: @10`#i$. To explain each symbol:
 @ signifies the start of the line.
 $ signifies the end of the line.
 # signifies the position of current counting. It always moves from right to
left, and then when getting to the beginning of the line - back to the end.
 ` signifies the "carried" unit.
 1 and 0 are the digits of the currently computed binary number.
>

{SEEK|EOF|APPEND|
	<This part lives at the end of the file. It repeatedly inserts the main body of the>
	<..application, lets it be executed, lets it detect when the computation is finished and>
	<lets it disable this part when computation is finished.>

	{SEEK|SOF|APPEND|
		<Main body of the program.>

		{FIND|i#|REPLACE|#i}
		{FIND|0#i|REPLACE|#1}
		{FIND|1#i|REPLACE|#`0}
		{FIND|0#`|REPLACE|#1}
		{FIND|1#`|REPLACE|#`0}

		<When exhausting all uncounted 'i's, this part removes '#', signifying the end of computation for this line.>

		{FIND|0#$|REPLACE|0$}
		{FIND|1#$|REPLACE|1$}

		<
		This part detects when '#' reaches the start of the string and moves it back
		to the end to continue computation.
		>

		{FIND|@#`|REPLACE|@1|FIND|$|INSERT|#}
		{FIND|@#i|REPLACE|@1|FIND|$|INSERT|#}
		{FIND|@#`|REPLACE|@1|FIND|$|INSERT|#}
		{FIND|1#1|REPLACE|11|FIND|$|INSERT|#}
		{FIND|1#0|REPLACE|10|FIND|$|INSERT|#}
		{FIND|0#1|REPLACE|01|FIND|$|INSERT|#}
		{FIND|0#0|REPLACE|00|FIND|$|INSERT|#}

		<
		This part detects if the computation is completely finished and disables the last
		command in the file by inserting 'ONCE' into it. The last part is the one which
		repeatedly prepends the body to the beginning of the file.
		>

		<
		Detection of finished computation works by detecting when there are no longer symbols 'i' and '`'
		in the file. Symbols '&' and '*' work as markings for when the previously menntioned symbols are not found.
		>

		{SEEK|SOF|INSERT|&|FIND|i|SEEK|SOF|FIND|&|DELETE|ONCE}
		{SEEK|SOF|INSERT|*|FIND|`|SEEK|SOF|FIND|*|DELETE|ONCE}
		{SEEK|SOF|FIND|*&|SEEK|EOF|SEEK|-1|FIND|\}|INSERT|\|ON|INSERT|CE
			|SEEK|SOF|INSERT|
				{SEEK|SOF|FIND|#|DELETE}
				{SEEK|SOF|FIND|$|DELETE}
				{SEEK|SOF|FIND|@|DELETE}
			|ONCE
		}

		<Cleaning up marks '&' and '*'.>
		{SEEK|SOF|FIND|&|DELETE}
		{SEEK|SOF|FIND|*|DELETE}
	}
	|ONCE
}

<Converting strings of 'i's into the needed format for computation.>
{FIND|i|INSERT|@|SEEK|EOL|APPEND|#$|SEEK|EOL|APPEND|SELF|ONCE}

~~~~~~~~~~~~~~

iiiiii

iii

iiiiiiiiii

i

